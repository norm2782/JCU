Name:                JCU
Version:             0.3
Synopsis:            Online application for visualizing Prolog proof trees.
Description:         This package was developed to demonstrate the ideas behind
                     the Prolog language. It uses a very small interpreter
                     (@Language.Prolog.Nanoprolog@) which can be run on its
                     own.
                     .
                     This package contains an environment constructed for the
                     Junior College at Utrecht University. It provides a simple
                     environment in which rules can be defined, and proofs can
                     be constructed interactively. The software can be
                     installed on a server, so students do not have to install
                     anything on their own machines.
License:             BSD3
license-file:        LICENSE
Author:              Jurriën Stutterheim, Doaitse Swierstra
Maintainer:          Jurriën Stutterheim <j.stutterheim@uu.nl>
Homepage:            http://www.cs.uu.nl/wiki/PrologJCU
Stability:           Experimental
Category:            Web
Build-type:          Simple
Cabal-version:       >= 1.6
Extra-Source-Files:  README.md, FUTURE-WORK.md

Source-repository head
  Type:       git
  Location:   https://github.com/norm2782/JCU.git

Flag development
  Description: Whether to build the server in development (interpreted) mode
  Default: False

Executable jcu
  hs-source-dirs: src
  main-is: Main.hs

  Build-depends:
    aeson >= 0.3,
    attoparsec >= 0.9,
    base >= 4 && < 5,
    blaze-html >= 0.4.1,
    bytestring >= 0.9,
    bson >= 0.1.3,
    containers >= 0.4,
    data-lens >= 2,
    data-lens-template >= 2,
    digestive-functors >= 0.2 && < 0.3,
    digestive-functors-blaze >= 0.2.1 && < 0.3,
    digestive-functors-snap >= 0.1.1 && < 0.3,
    email-validate >= 0.2.6,
    HDBC >= 2.2,
    HDBC-sqlite3 >= 2.3,
    ListLike >= 3.1 && < 3.2,
    MonadCatchIO-transformers >= 0.2.1 && < 0.3,
    mtl >= 2.0,
    NanoProlog >= 0.2.3.2,
    snap >= 0.6,
    snap-core >= 0.6,
    snap-server >= 0.6,
    snaplet-hdbc >= 0.6.3,
    text >= 0.11,
    time >= 1.1 && < 1.3,
    transformers >= 0.2,
    uu-parsinglib >= 2.7.1,
    xmlhtml >= 0.1

  extensions:
        TypeSynonymInstances
      , OverloadedStrings
      , MultiParamTypeClasses
      , FunctionalDependencies
      , DeriveDataTypeable
      , FlexibleInstances

  if flag(development)
    cpp-options: -DDEVELOPMENT
    -- In development mode, speed is already going to suffer, so skip
    -- the fancy optimization flags.  Additionally, disable all
    -- warnings.  The hint library doesn't give an option to execute
    -- compiled code when there were also warnings, so disabling
    -- warnings allows quicker workflow.
    ghc-options: -threaded -w -Wall -fwarn-tabs
  else
    if impl(ghc >= 6.12.0)
      ghc-options: -threaded -Wall -fwarn-tabs -funbox-strict-fields -O2
                   -fno-warn-orphans -fno-warn-unused-do-bind
    else
      ghc-options: -threaded -Wall -fwarn-tabs -funbox-strict-fields -O2
                   -fno-warn-orphans
